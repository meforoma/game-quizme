{"version":3,"sources":["api/api.ts","components/QuestionDisplay.tsx","components/QuizScreen.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getQuestions","count","fetch","then","response","ok","json","Error","status","statusText","data","results","request","QuestionDisplay","props","console","log","category","difficulty","question","correctAnswer","incorrectAnswers","userAnswers","userClickedCheckme","setUserAnswers","useState","answersLayout","setAnswersLayout","useEffect","randAnswers","concat","sort","Math","floor","random","className","decode","map","answer","classNames","onClick","prev","QuizScreen","userQuestionsCount","restart","questions","setQuestions","correctAnswersPairs","mapQuestion","correct_answer","correctAnswers","Object","fromEntries","keys","length","setUserClickedCheckme","evaluateAnswers","result","questionsToShow","incorrect_answers","nanoid","type","App","setUserQuestionsCount","showStartScreen","showQuizScreen","screenDisplay","setScreenDisplay","name","value","onChange","event","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f53d599.chunk.js","sourcesContent":["const BASE_URL = 'https://opentdb.com/api.php';\n\nconst request = (\n  count = '',\n) => fetch(`${BASE_URL}${count}`)\n  .then(response => {\n    if (!response.ok) {\n      return new Error(`${response.status} -- ${response.statusText}`);\n    }\n    return response.json();\n  })\n  .then(data => data.results);\n\nexport const getQuestions = (count: number) => request(`?amount=${count}`);\n","/* eslint-disable no-console */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\nimport { decode } from 'html-entities';\nimport classNames from 'classnames';\nimport {\n  Dispatch, SetStateAction,\n  useEffect, useState,\n} from 'react';\n\ntype Props = {\n  category: string;\n  difficulty: string;\n  question: string;\n  correctAnswer: string;\n  incorrectAnswers: string[];\n  userAnswers: any;\n  userClickedCheckme: boolean;\n  setUserAnswers: Dispatch<SetStateAction<{}>>;\n};\n\nexport const QuestionDisplay = (props: Props) => {\n  console.log('mount QuestionDisplay');\n\n  const {\n    category, difficulty,\n    question, correctAnswer,\n    incorrectAnswers,\n    userAnswers, userClickedCheckme,\n    setUserAnswers,\n  } = props;\n\n  const [answersLayout, setAnswersLayout] = useState<string[]>([]);\n\n  useEffect(() => {\n    const answers = incorrectAnswers.concat(correctAnswer);\n    const randAnswers = answers.sort(() => Math.floor(Math.random() - 0.5));\n\n    setAnswersLayout(randAnswers);\n  }, []);\n\n  return (\n    <div className=\"question\">\n      <span className={`question__difficulty question__difficulty--${difficulty}`}>\n        {`Difficulty: ${difficulty}`}\n      </span>\n      <span className=\"question__category\">\n        {` Category: ${decode(category)}`}\n      </span>\n      <div className=\"question__body\">\n        <h3>{decode(question)}</h3>\n      </div>\n\n      <div className=\"question__answers\">\n        {answersLayout.map((answer: string) => (\n          <div\n            key={answer}\n            className={classNames({\n              answer,\n              'answer--selected': userAnswers[question] === answer,\n              'answer--correct': userClickedCheckme\n                && correctAnswer === answer,\n              'answer--incorrect': userClickedCheckme\n                && correctAnswer !== answer\n                && userAnswers[question] === answer,\n            })}\n            onClick={() => setUserAnswers((prev: {}) => ({\n              ...prev,\n              [question]: answer,\n            }))}\n          >\n            {decode(answer)}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable no-unused-vars */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-console */\n\nimport { nanoid } from 'nanoid';\nimport { useEffect, useState } from 'react';\nimport Confetti from 'react-confetti';\nimport { getQuestions } from '../api/api';\nimport { Question } from '../types/types';\nimport { QuestionDisplay } from './QuestionDisplay';\n\ntype Props = {\n  userQuestionsCount: number,\n  restart: () => void,\n};\n\ntype UserAnswers = {\n  [question: string]: string;\n};\n\nexport const QuizScreen = (props: Props) => {\n  console.log('mount QuizScreen');\n\n  const { userQuestionsCount, restart } = props;\n\n  const [questions, setQuestions] = useState<Question[]>([]);\n\n  useEffect(() => {\n    getQuestions(userQuestionsCount)\n      .then(setQuestions);\n  }, []);\n\n  const correctAnswersPairs = questions.map(mapQuestion => (\n    [mapQuestion.question, mapQuestion.correct_answer]\n  ));\n  const correctAnswers = Object.fromEntries(correctAnswersPairs);\n\n  const [userAnswers, setUserAnswers] = useState<UserAnswers>({});\n\n  console.log('correctAnswersObj', correctAnswers);\n  console.log('userAnswers', userAnswers, Object.keys(userAnswers).length);\n\n  const [userClickedCheckme, setUserClickedCheckme] = useState(false);\n\n  const evaluateAnswers = () => {\n    let result = 0;\n\n    for (const answer in userAnswers) {\n      if (correctAnswers[answer] === userAnswers[answer]) {\n        result += 1;\n      }\n    }\n\n    return result;\n  };\n\n  console.log('evaluateAnswers', evaluateAnswers());\n\n  const questionsToShow = questions.map((question: Question) => (\n    <QuestionDisplay\n      key={nanoid()}\n      category={question.category}\n      difficulty={question.difficulty}\n      question={question.question}\n      correctAnswer={question.correct_answer}\n      incorrectAnswers={question.incorrect_answers}\n      userAnswers={userAnswers}\n      userClickedCheckme={userClickedCheckme}\n      setUserAnswers={setUserAnswers}\n    />\n  ));\n\n  const handleCheckMe = () => {\n    if (userClickedCheckme) {\n      setUserClickedCheckme(false);\n      setUserAnswers({});\n\n      restart();\n    } else {\n      setUserClickedCheckme(true);\n    }\n  };\n\n  return (\n    <>\n      {evaluateAnswers() === userQuestionsCount\n        && userClickedCheckme\n        && <Confetti />}\n\n      <div className=\"questions-container\">\n        {questionsToShow}\n      </div>\n\n      {userClickedCheckme && (\n        <div className=\"result-message\">\n          {userQuestionsCount === evaluateAnswers()\n            ? 'ðŸŽ‰ Spectacular!!! You scored all the questions ðŸŽ‰'\n            : `You scored ${evaluateAnswers()} of ${userQuestionsCount} questions`}\n        </div>\n      )}\n\n      {userQuestionsCount\n        === Object.keys(userAnswers).length && (\n          <button\n            className=\"button-validate\"\n            type=\"button\"\n            onClick={() => handleCheckMe()}\n          >\n            {userClickedCheckme ? 're-Quiz, please' : 'Check me'}\n          </button>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\n\nimport { QuizScreen } from './components/QuizScreen';\nimport './styles/general.scss';\n\nexport const App = () => {\n  const [userQuestionsCount, setUserQuestionsCount] = useState(3);\n\n  const [screenDisplay, setScreenDisplay] = useState({\n    showStartScreen: true,\n    showQuizScreen: false,\n  });\n\n  const restart = () => {\n    setScreenDisplay({\n      showStartScreen: true,\n      showQuizScreen: false,\n    });\n  };\n\n  const questionsSelect = [3, 5, 6, 7, 8, 9, 10];\n\n  return (\n    <main>\n      {screenDisplay.showStartScreen && (\n        <>\n          <h1 className=\"title\">QuizMe</h1>\n\n          <section className=\"start-section\">\n            <h4>How much questions do you want to be quizzed on?</h4>\n\n            <select\n              name=\"userQuestionsCount\"\n              className=\"user-select-questions-count\"\n              value={userQuestionsCount}\n              onChange={(event) => setUserQuestionsCount(+event.target.value)}\n            >\n              {questionsSelect.map(count => (\n                <option key={count} value={count}>{count}</option>\n              ))}\n            </select>\n          </section>\n\n          <button\n            type=\"button\"\n            className=\"start-button\"\n            onClick={() => setScreenDisplay({\n              showStartScreen: false,\n              showQuizScreen: true,\n            })}\n          >\n            Quiz me!\n          </button>\n        </>\n      )}\n\n      {screenDisplay.showQuizScreen && (\n        <QuizScreen\n          userQuestionsCount={userQuestionsCount}\n          restart={restart}\n        />\n      )}\n\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}