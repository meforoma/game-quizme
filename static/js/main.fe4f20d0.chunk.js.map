{"version":3,"sources":["api/api.ts","components/QuestionDisplay.tsx","components/QuizScreen.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getQuestions","count","fetch","then","response","ok","json","Error","status","statusText","data","results","request","QuestionDisplay","props","category","difficulty","question","correctAnswer","incorrectAnswers","userAnswers","userClickedCheckme","setUserAnswers","useState","answersLayout","setAnswersLayout","useEffect","answers","concat","sort","className","decode","map","answer","classNames","onClick","prev","QuizScreen","userQuestionsCount","restart","setUserClickedCheckme","questions","setQuestions","correctAnswersPairs","mapQuestion","correct_answer","correctAnswers","Object","fromEntries","evaluateAnswers","result","questionsToShow","incorrect_answers","nanoid","keys","length","type","App","setUserQuestionsCount","showStartScreen","showQuizScreen","screenDisplay","setScreenDisplay","toggleScreen","min","max","name","value","onChange","event","target","onKeyDown","code","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fe4f20d0.chunk.js","sourcesContent":["const BASE_URL = 'https://opentdb.com/api.php';\n\nconst request = (\n  count = '',\n) => fetch(`${BASE_URL}${count}`)\n  .then(response => {\n    if (!response.ok) {\n      return new Error(`${response.status} -- ${response.statusText}`);\n    }\n    return response.json();\n  })\n  .then(data => data.results);\n\nexport const getQuestions = (count: number) => request(`?amount=${count}`);\n","/* eslint-disable no-console */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\nimport { decode } from 'html-entities';\nimport classNames from 'classnames';\nimport {\n  Dispatch, SetStateAction,\n  useEffect, useState,\n} from 'react';\n\ntype Props = {\n  category: string;\n  difficulty: string;\n  question: string;\n  correctAnswer: string;\n  incorrectAnswers: string[];\n  userAnswers: any;\n  userClickedCheckme: boolean;\n  setUserAnswers: Dispatch<SetStateAction<{}>>;\n};\n\nexport const QuestionDisplay = (props: Props) => {\n  const {\n    category, difficulty,\n    question, correctAnswer,\n    incorrectAnswers,\n    userAnswers, userClickedCheckme,\n    setUserAnswers,\n  } = props;\n\n  const [answersLayout, setAnswersLayout] = useState<string[]>([]);\n\n  useEffect(() => {\n    const answers = incorrectAnswers.concat(correctAnswer);\n\n    setAnswersLayout(answers.sort());\n  }, []);\n\n  return (\n    <div className=\"question\">\n      <span className={`question__difficulty question__difficulty--${difficulty}`}>\n        {`Difficulty: ${difficulty}`}\n      </span>\n      <span className=\"question__category\">\n        {` Category: ${decode(category)}`}\n      </span>\n      <div className=\"question__body\">\n        <h3>{decode(question)}</h3>\n      </div>\n\n      <div className=\"question__answers\">\n        {answersLayout.map((answer: string) => (\n          <div\n            key={answer}\n            className={classNames({\n              answer,\n              'answer--selected': userAnswers[question] === answer,\n              'answer--correct': userClickedCheckme\n                && correctAnswer === answer,\n              'answer--incorrect': userClickedCheckme\n                && correctAnswer !== answer\n                && userAnswers[question] === answer,\n            })}\n            onClick={() => setUserAnswers((prev: {}) => ({\n              ...prev,\n              [question]: answer,\n            }))}\n          >\n            {decode(answer)}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-console */\n\nimport { nanoid } from 'nanoid';\nimport { useEffect, useState } from 'react';\nimport Confetti from 'react-confetti';\nimport { getQuestions } from '../api/api';\nimport { Question } from '../types/types';\nimport { QuestionDisplay } from './QuestionDisplay';\n\ntype Props = {\n  userQuestionsCount: number,\n  restart: () => void,\n};\n\ntype UserAnswers = {\n  [question: string]: string;\n};\n\nexport const QuizScreen = (props: Props) => {\n  const { userQuestionsCount, restart } = props;\n\n  const [userAnswers, setUserAnswers] = useState<UserAnswers>({});\n  const [userClickedCheckme, setUserClickedCheckme] = useState(false);\n\n  // questions initialization to pass onto QuestionDisplay component\n  const [questions, setQuestions] = useState<Question[]>([]);\n\n  useEffect(() => {\n    getQuestions(userQuestionsCount)\n      .then(setQuestions);\n  }, []);\n\n  // object of correct answers to evaluate against\n  const correctAnswersPairs = questions.map(mapQuestion => (\n    [mapQuestion.question, mapQuestion.correct_answer]\n  ));\n  const correctAnswers = Object.fromEntries(correctAnswersPairs);\n\n  const evaluateAnswers = () => {\n    let result = 0;\n\n    for (const answer in userAnswers) {\n      if (correctAnswers[answer] === userAnswers[answer]) {\n        result += 1;\n      }\n    }\n\n    return result;\n  };\n\n  const questionsToShow = questions.map((question: Question) => (\n    <QuestionDisplay\n      key={nanoid()}\n      category={question.category}\n      difficulty={question.difficulty}\n      question={question.question}\n      correctAnswer={question.correct_answer}\n      incorrectAnswers={question.incorrect_answers}\n      userAnswers={userAnswers}\n      userClickedCheckme={userClickedCheckme}\n      setUserAnswers={setUserAnswers}\n    />\n  ));\n\n  const handleCheckMe = () => {\n    if (userClickedCheckme) {\n      setUserClickedCheckme(false);\n      setUserAnswers({});\n\n      restart();\n    } else {\n      setUserClickedCheckme(true);\n    }\n  };\n\n  return (\n    <>\n      {evaluateAnswers() === userQuestionsCount\n        && userClickedCheckme\n        && <Confetti />}\n\n      <div className=\"questions-container\">\n        {questionsToShow}\n      </div>\n\n      {userClickedCheckme && (\n        <div className=\"result-message\">\n          {userQuestionsCount === evaluateAnswers()\n            ? 'ðŸŽ‰ Spectacular!!! You scored all the questions ðŸŽ‰'\n            : `You scored ${evaluateAnswers()} of ${userQuestionsCount} questions`}\n        </div>\n      )}\n\n      {userQuestionsCount\n        === Object.keys(userAnswers).length && (\n          <button\n            className=\"button-validate\"\n            type=\"button\"\n            onClick={() => handleCheckMe()}\n          >\n            {userClickedCheckme ? 're-Quiz, please' : 'Check me'}\n          </button>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\n\nimport { QuizScreen } from './components/QuizScreen';\nimport './styles/general.scss';\n\nexport const App = () => {\n  const [userQuestionsCount, setUserQuestionsCount] = useState(3);\n\n  const [screenDisplay, setScreenDisplay] = useState({\n    showStartScreen: true,\n    showQuizScreen: false,\n  });\n\n  const restart = () => {\n    setScreenDisplay({\n      showStartScreen: true,\n      showQuizScreen: false,\n    });\n  };\n\n  const toggleScreen = () => {\n    setScreenDisplay({\n      showStartScreen: false,\n      showQuizScreen: true,\n    });\n  };\n\n  return (\n    <main>\n      {screenDisplay.showStartScreen && (\n        <>\n          <h1 className=\"title\">QuizMe</h1>\n\n          <section className=\"start-section\">\n            <div>\n              <h3>How much questions do you want to be quizzed on?</h3>\n            </div>\n\n            <div className=\"user-select-questions-count\">\n              <input\n                type=\"number\"\n                min={3}\n                max={20}\n                name=\"userQuestionsCount\"\n                className=\"user-select-questions-count__input\"\n                value={userQuestionsCount}\n                onChange={(event) => setUserQuestionsCount(+event.target.value)}\n                onKeyDown={(event) => {\n                  if (event.code === 'Enter') {\n                    toggleScreen();\n                  }\n                }}\n              />\n            </div>\n          </section>\n\n          <button\n            type=\"button\"\n            className=\"start-button\"\n            onClick={() => toggleScreen()}\n          >\n            Quiz me!\n          </button>\n        </>\n      )}\n\n      {screenDisplay.showQuizScreen && (\n        <QuizScreen\n          userQuestionsCount={userQuestionsCount}\n          restart={restart}\n        />\n      )}\n\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}