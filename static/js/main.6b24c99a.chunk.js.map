{"version":3,"sources":["api/api.ts","components/Answers.tsx","components/QuestionDisplay.tsx","components/QuizScreen.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getQuestions","count","fetch","then","response","ok","json","Error","status","statusText","data","results","request","Answers","React","memo","props","userAnswers","question","userClickedCheckme","correctAnswer","incorrectAnswers","setUserAnswers","answersLayout","concat","sort","map","answer","className","classNames","onClick","prev","decode","QuestionDisplay","category","difficulty","answers","useMemo","QuizScreen","userQuestionsCount","restart","isLoading","setIsLoading","useState","setUserClickedCheckme","questions","setQuestions","useEffect","length","correctAnswersPairs","mapQuestion","correct_answer","correctAnswers","Object","fromEntries","countCorrectAnswers","result","questionsDisplay","incorrect_answers","nanoid","keys","type","App","setUserQuestionsCount","showStartScreen","showQuizScreen","screenDisplay","setScreenDisplay","toggleScreen","min","max","name","value","onChange","event","target","onKeyUp","code","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b24c99a.chunk.js","sourcesContent":["const BASE_URL = 'https://opentdb.com/api.php';\n\nconst request = (\n  count = '',\n) => fetch(`${BASE_URL}${count}`)\n  .then(response => {\n    if (!response.ok) {\n      return new Error(`${response.status} -- ${response.statusText}`);\n    }\n    return response.json();\n  })\n  .then(data => data.results);\n\nexport const getQuestions = (count: number) => request(`?amount=${count}`);\n","/* eslint-disable no-console */\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n\nimport React, { Dispatch, SetStateAction } from 'react';\nimport classNames from 'classnames';\nimport { decode } from 'html-entities';\n\ntype Props = {\n  question: string;\n  correctAnswer: string;\n  incorrectAnswers: string[];\n  userAnswers: any;\n  userClickedCheckme: boolean;\n  setUserAnswers: Dispatch<SetStateAction<{}>>;\n}\n\nexport const Answers = React.memo(\n  (props: Props) => {\n    const {\n      userAnswers,\n      question, userClickedCheckme,\n      correctAnswer, incorrectAnswers,\n      setUserAnswers,\n    } = props;\n\n    const answersLayout = incorrectAnswers.concat(correctAnswer)\n      .sort();\n\n    return (\n      <>\n        {answersLayout.map((answer: string) => (\n          <div\n            key={answer}\n            className={classNames({\n              answer,\n              'answer--selected': userAnswers[question] === answer,\n              'answer--correct': userClickedCheckme\n                && correctAnswer === answer,\n              'answer--incorrect': userClickedCheckme\n                && correctAnswer !== answer\n                && userAnswers[question] === answer,\n            })}\n            onClick={() => {\n              if (!userClickedCheckme) {\n                // ^ prevent changing userAnswer after quiz submit\n                setUserAnswers((prev: {}) => ({\n                  ...prev,\n                  [question]: answer,\n                }));\n              }\n            }}\n          >\n            {decode(answer)}\n          </div>\n        ))}\n      </>\n    );\n  },\n);\n","/* eslint-disable no-console */\n\nimport { decode } from 'html-entities';\nimport {\n  Dispatch, SetStateAction,\n  useMemo,\n} from 'react';\nimport { Answers } from './Answers';\n\ntype Props = {\n  category: string;\n  difficulty: string;\n  question: string;\n  correctAnswer: string;\n  incorrectAnswers: string[];\n  userAnswers: any;\n  userClickedCheckme: boolean;\n  setUserAnswers: Dispatch<SetStateAction<{}>>;\n};\n\nexport const QuestionDisplay = (props: Props) => {\n  const {\n    category, difficulty,\n    question, correctAnswer,\n    incorrectAnswers,\n    userAnswers, userClickedCheckme,\n    setUserAnswers,\n  } = props;\n\n  const answers = useMemo(() => (\n    <Answers\n      incorrectAnswers={incorrectAnswers}\n      correctAnswer={correctAnswer}\n      userAnswers={userAnswers}\n      question={question}\n      userClickedCheckme={userClickedCheckme}\n      setUserAnswers={setUserAnswers}\n    />\n  ), []);\n\n  return (\n    <div className=\"question\">\n      <div className=\"question__header\">\n        <span className={`question__difficulty question__difficulty--${difficulty}`}>\n          {`Difficulty: ${difficulty}`}\n        </span>\n        <span className=\"question__category\">\n          {` Category: ${decode(category)}`}\n        </span>\n      </div>\n\n      <div className=\"question__body\">\n        <span>{decode(question)}</span>\n      </div>\n\n      <div className=\"question__answers\">\n        {answers}\n      </div>\n\n    </div>\n  );\n};\n","/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-console */\n\nimport { nanoid } from 'nanoid';\nimport {\n  useEffect, useState,\n  Dispatch, SetStateAction,\n} from 'react';\nimport Confetti from 'react-confetti';\nimport { getQuestions } from '../api/api';\nimport { Question } from '../types/types';\nimport { QuestionDisplay } from './QuestionDisplay';\n\ntype Props = {\n  userQuestionsCount: number,\n  restart: () => void,\n  isLoading: boolean,\n  setIsLoading: Dispatch<SetStateAction<boolean>>,\n};\n\ntype UserAnswers = {\n  [question: string]: string;\n};\n\nexport const QuizScreen = (props: Props) => {\n  const {\n    userQuestionsCount, restart,\n    isLoading, setIsLoading,\n  } = props;\n\n  const [userAnswers, setUserAnswers] = useState<UserAnswers>({});\n  const [userClickedCheckme, setUserClickedCheckme] = useState(false);\n\n  // questions initialization to pass onto QuestionDisplay component\n  const [questions, setQuestions] = useState<Question[]>([]);\n\n  useEffect(() => {\n    getQuestions(userQuestionsCount)\n      .then(setQuestions);\n  }, []);\n\n  if (questions.length > 0) {\n    setIsLoading(false);\n  }\n\n  // object of correct answers to evaluate against\n  const correctAnswersPairs = questions.map(mapQuestion => (\n    [mapQuestion.question, mapQuestion.correct_answer]\n  ));\n  const correctAnswers = Object.fromEntries(correctAnswersPairs);\n\n  const countCorrectAnswers = () => {\n    let result = 0;\n\n    for (const answer in userAnswers) {\n      if (correctAnswers[answer] === userAnswers[answer]) {\n        result += 1;\n      }\n    }\n\n    return result;\n  };\n\n  const handleCheckMe = () => {\n    if (userClickedCheckme) {\n      setUserClickedCheckme(false);\n      setUserAnswers({});\n\n      restart();\n    } else {\n      setUserClickedCheckme(true);\n    }\n  };\n\n  const questionsDisplay = questions.map((question: Question) => (\n    <QuestionDisplay\n      key={nanoid()}\n      category={question.category}\n      difficulty={question.difficulty}\n      question={question.question}\n      correctAnswer={question.correct_answer}\n      incorrectAnswers={question.incorrect_answers}\n      userAnswers={userAnswers}\n      userClickedCheckme={userClickedCheckme}\n      setUserAnswers={setUserAnswers}\n    />\n  ));\n\n  return (\n    <>\n      {countCorrectAnswers() === userQuestionsCount\n        && userClickedCheckme\n        && <Confetti />}\n\n      {!isLoading && <span className=\"title\">Here is your quiz:</span>}\n\n      <div className=\"main-container\">\n        <div className=\"questions-container\">\n          {questionsDisplay}\n        </div>\n\n        {userClickedCheckme && (\n          <div className=\"result-message\">\n            {userQuestionsCount === countCorrectAnswers()\n              ? '🎉 Spectacular!!! You scored all the questions 🎉'\n              : `You scored ${countCorrectAnswers()} of ${userQuestionsCount} questions`}\n          </div>\n        )}\n\n        {userQuestionsCount\n          === Object.keys(userAnswers).length && (\n            <button\n              className=\"button-validate\"\n              type=\"button\"\n              onClick={() => handleCheckMe()}\n            >\n              {userClickedCheckme\n                ? 're-Quiz, please'\n                : 'Check me'}\n            </button>\n        )}\n      </div>\n    </>\n  );\n};\n","import { useState } from 'react';\n\nimport { QuizScreen } from './components/QuizScreen';\nimport './styles/general.scss';\n\nexport const App = () => {\n  const [userQuestionsCount, setUserQuestionsCount] = useState(3);\n\n  const [screenDisplay, setScreenDisplay] = useState({\n    showStartScreen: true,\n    showQuizScreen: false,\n  });\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  const restart = () => {\n    setScreenDisplay({\n      showStartScreen: true,\n      showQuizScreen: false,\n    });\n  };\n\n  const toggleScreen = () => {\n    setScreenDisplay({\n      showStartScreen: false,\n      showQuizScreen: true,\n    });\n    setIsLoading(true);\n  };\n\n  return (\n    <main>\n      {screenDisplay.showStartScreen && (\n        <>\n          <h1 className=\"title\">QuizMe</h1>\n\n          <section className=\"start-section\">\n            <div>\n              <h3>How much questions do you want to be quizzed on?</h3>\n            </div>\n\n            <div className=\"user-select-questions-count\">\n              <input\n                type=\"number\"\n                min={3}\n                max={20}\n                name=\"userQuestionsCount\"\n                className=\"user-select-questions-count__input\"\n                value={userQuestionsCount}\n                onChange={(event) => setUserQuestionsCount(+event.target.value)}\n                onKeyUp={(event) => {\n                  if (event.code === 'Enter') {\n                    toggleScreen();\n                  }\n                }}\n              />\n            </div>\n          </section>\n\n          <button\n            type=\"button\"\n            className=\"start-button\"\n            onClick={() => {\n              toggleScreen();\n            }}\n          >\n            Quiz me!\n          </button>\n        </>\n      )}\n\n      {isLoading && (\n        <h1>\n          ...Loading\n        </h1>\n      )}\n\n      {screenDisplay.showQuizScreen && (\n        <QuizScreen\n          userQuestionsCount={userQuestionsCount}\n          isLoading={isLoading}\n          setIsLoading={setIsLoading}\n          restart={restart}\n        />\n      )}\n\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}